import numpy as np
import matplotlib.pyplot as plt
import scipy.optimize

# Заданные данные
x_values = np.array([3, 5, 7, 9, 11, 13])
y_values = np.array([3.5, 4.4, 5.7, 6.1, 6.5, 7.3])


# Функции для аппроксимации

# 1.1 Линейная функция: y = ax + b
def linear_func(x, a, b):
    return a * x + b


# 1.2 Степенная функция: y = ax^b
def power_func(x, a, b):
    return a * np.power(x, b)

# 1.3 Показательная функция: y = a * e^(bx)
def exponential_func(x, a, b):
    return a * np.exp(b * x)

# 1.4 Квадратичная функция: y = ax^2 + bx + c
def quadratic_func(x, a, b, c):
    return a * x ** 2 + b * x + c


# Функция для метода наименьших квадратов
def least_squares_method(func, x_values, y_values, initial_guess):
    # Функция ошибки
    error_func = lambda params: np.sum((func(x_values, *params) - y_values) ** 2) #сумму квадратов разностей между теоретическими значениями функции и экспериментальными значениями.

    # Минимизация функции ошибки
    result = scipy.optimize.minimize(error_func, initial_guess, method='BFGS')

    return result.x


# Метод наименьших квадратов для каждой функции
linear_params = least_squares_method(linear_func, x_values, y_values, [1, 1])
power_params = least_squares_method(power_func, x_values, y_values, [1, 1])
exponential_params = least_squares_method(exponential_func, x_values, y_values, [1, 1])
quadratic_params = least_squares_method(quadratic_func, x_values, y_values, [1, 1, 1])


# Графики
plt.figure(figsize=(10, 6))

# График линейной функции
plt.subplot(221)
plt.scatter(x_values, y_values, label='Экспериментальные точки')
plt.plot(x_values, linear_func(x_values, *linear_params), 'r-', label='Линейная функция')
plt.legend()

# График степенной функции
plt.subplot(222)
plt.scatter(x_values, y_values, label='Экспериментальные точки')
plt.plot(x_values, power_func(x_values, *power_params), 'g-', label='Степенная функция')
plt.legend()

# График показательной функции
plt.subplot(223)
plt.scatter(x_values, y_values, label='Экспериментальные точки')
plt.plot(x_values, exponential_func(x_values, *exponential_params), 'b-', label='Показательная функция')
plt.legend()

# График квадратичной функции
plt.subplot(224)
plt.scatter(x_values, y_values, label='Экспериментальные точки')
plt.plot(x_values, quadratic_func(x_values, *quadratic_params), 'y-', label='Квадратичная функция')
plt.legend()

plt.tight_layout()
plt.show()